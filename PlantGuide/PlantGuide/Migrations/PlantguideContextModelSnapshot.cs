// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using PlantGuide.DataAccess.EF;

#nullable disable

namespace PlantGuide.Migrations
{
    [DbContext(typeof(PlantguideContext))]
    partial class PlantguideContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("DataAccess.Models.Climate", b =>
                {
                    b.Property<int>("ClimateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ClimateId"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<double?>("PrecipitationMax")
                        .HasColumnType("float");

                    b.Property<double?>("PrecipitationMin")
                        .HasColumnType("float");

                    b.Property<double?>("TemperatureMax")
                        .HasColumnType("float");

                    b.Property<double?>("TemperatureMin")
                        .HasColumnType("float");

                    b.HasKey("ClimateId")
                        .HasName("PK__Climate__55D2DDAFDCD706A2");

                    b.HasIndex("PlantId");

                    b.ToTable("Climate", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Country", b =>
                {
                    b.Property<int>("CountryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CountryId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("CountryId")
                        .HasName("PK__Country__10D1609FD3D2CEAE");

                    b.ToTable("Country", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Family", b =>
                {
                    b.Property<int>("FamilyId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("FamilyId")
                        .HasName("PK__Family__41D82F6B2831C83D");

                    b.ToTable("Family", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.FamilyPlant", b =>
                {
                    b.Property<int>("FamilyPlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FamilyPlantId"));

                    b.Property<int?>("FamilyId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.HasKey("FamilyPlantId")
                        .HasName("PK__FamilyPl__BE40E246F755D911");

                    b.HasIndex("FamilyId");

                    b.HasIndex("PlantId");

                    b.ToTable("FamilyPlant", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.FloweringSeasonPlant", b =>
                {
                    b.Property<int>("FloweringSeasonPlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FloweringSeasonPlantId"));

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("TypeSeasonId")
                        .HasColumnType("int");

                    b.HasKey("FloweringSeasonPlantId")
                        .HasName("PK__Flowerin__8CD61782C83D2AC3");

                    b.HasIndex("PlantId");

                    b.HasIndex("TypeSeasonId");

                    b.ToTable("FloweringSeasonPlant", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Origin", b =>
                {
                    b.Property<int>("OriginId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OriginId"));

                    b.Property<int?>("CountryId")
                        .HasColumnType("int");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("Years")
                        .HasColumnType("int");

                    b.HasKey("OriginId")
                        .HasName("PK__Origin__171FA226440757CA");

                    b.HasIndex("CountryId");

                    b.HasIndex("PlantId");

                    b.ToTable("Origin", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Photo", b =>
                {
                    b.Property<int>("PhotoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PhotoId"));

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("URL");

                    b.HasKey("PhotoId")
                        .HasName("PK__Photo__21B7B5E25D066AA2");

                    b.HasIndex("PlantId");

                    b.ToTable("Photo", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Plant", b =>
                {
                    b.Property<int>("PlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlantId"));

                    b.Property<string>("CommonName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ScientificName")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("PlantId")
                        .HasName("PK__Plant__98FE395C0C7D3ADD");

                    b.ToTable("Plant", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Source", b =>
                {
                    b.Property<int>("SourceId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SourceId"));

                    b.Property<string>("Author")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Title")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Url")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("URL");

                    b.HasKey("SourceId")
                        .HasName("PK__Source__16E019190237B249");

                    b.ToTable("Source", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.SourcePlant", b =>
                {
                    b.Property<int>("SourcesPlantId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SourcesPlantId"));

                    b.Property<int?>("PlantId")
                        .HasColumnType("int");

                    b.Property<int?>("SourceId")
                        .HasColumnType("int");

                    b.HasKey("SourcesPlantId")
                        .HasName("PK__SourcePl__8423F49CBB37CE6A");

                    b.HasIndex("PlantId");

                    b.HasIndex("SourceId");

                    b.ToTable("SourcePlant", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.TypeSeason", b =>
                {
                    b.Property<int>("TypeSeasonId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("TypeSeasonId"));

                    b.Property<string>("Name")
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.HasKey("TypeSeasonId")
                        .HasName("PK__TypeSeas__86276B8B1FBABCD6");

                    b.ToTable("TypeSeason", (string)null);
                });

            modelBuilder.Entity("DataAccess.Models.Climate", b =>
                {
                    b.HasOne("DataAccess.Models.Plant", "Plant")
                        .WithMany("Climates")
                        .HasForeignKey("PlantId")
                        .HasConstraintName("FK__Climate__PlantId__59FA5E80");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DataAccess.Models.FamilyPlant", b =>
                {
                    b.HasOne("DataAccess.Models.Family", "Family")
                        .WithMany("FamilyPlants")
                        .HasForeignKey("FamilyId")
                        .HasConstraintName("FK__FamilyPla__Famil__5441852A");

                    b.HasOne("DataAccess.Models.Plant", "Plant")
                        .WithMany("FamilyPlants")
                        .HasForeignKey("PlantId")
                        .HasConstraintName("FK__FamilyPla__Plant__534D60F1");

                    b.Navigation("Family");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DataAccess.Models.FloweringSeasonPlant", b =>
                {
                    b.HasOne("DataAccess.Models.Plant", "Plant")
                        .WithMany("FloweringSeasonPlants")
                        .HasForeignKey("PlantId")
                        .HasConstraintName("FK__Flowering__Plant__6477ECF3");

                    b.HasOne("DataAccess.Models.TypeSeason", "TypeSeason")
                        .WithMany("FloweringSeasonPlants")
                        .HasForeignKey("TypeSeasonId")
                        .HasConstraintName("FK__Flowering__TypeS__656C112C");

                    b.Navigation("Plant");

                    b.Navigation("TypeSeason");
                });

            modelBuilder.Entity("DataAccess.Models.Origin", b =>
                {
                    b.HasOne("DataAccess.Models.Country", "Country")
                        .WithMany("Origins")
                        .HasForeignKey("CountryId")
                        .HasConstraintName("FK__Origin__CountryI__4E88ABD4");

                    b.HasOne("DataAccess.Models.Plant", "Plant")
                        .WithMany("Origins")
                        .HasForeignKey("PlantId")
                        .HasConstraintName("FK__Origin__PlantId__4D94879B");

                    b.Navigation("Country");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DataAccess.Models.Photo", b =>
                {
                    b.HasOne("DataAccess.Models.Plant", "Plant")
                        .WithMany("Photos")
                        .HasForeignKey("PlantId")
                        .HasConstraintName("FK__Photo__PlantId__571DF1D5");

                    b.Navigation("Plant");
                });

            modelBuilder.Entity("DataAccess.Models.SourcePlant", b =>
                {
                    b.HasOne("DataAccess.Models.Plant", "Plant")
                        .WithMany("SourcePlants")
                        .HasForeignKey("PlantId")
                        .HasConstraintName("FK__SourcePla__Plant__5EBF139D");

                    b.HasOne("DataAccess.Models.Source", "Source")
                        .WithMany("SourcePlants")
                        .HasForeignKey("SourceId")
                        .HasConstraintName("FK__SourcePla__Sourc__5FB337D6");

                    b.Navigation("Plant");

                    b.Navigation("Source");
                });

            modelBuilder.Entity("DataAccess.Models.Country", b =>
                {
                    b.Navigation("Origins");
                });

            modelBuilder.Entity("DataAccess.Models.Family", b =>
                {
                    b.Navigation("FamilyPlants");
                });

            modelBuilder.Entity("DataAccess.Models.Plant", b =>
                {
                    b.Navigation("Climates");

                    b.Navigation("FamilyPlants");

                    b.Navigation("FloweringSeasonPlants");

                    b.Navigation("Origins");

                    b.Navigation("Photos");

                    b.Navigation("SourcePlants");
                });

            modelBuilder.Entity("DataAccess.Models.Source", b =>
                {
                    b.Navigation("SourcePlants");
                });

            modelBuilder.Entity("DataAccess.Models.TypeSeason", b =>
                {
                    b.Navigation("FloweringSeasonPlants");
                });
#pragma warning restore 612, 618
        }
    }
}
